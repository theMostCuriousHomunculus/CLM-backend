type Mutation {
  deleteLocation: AccountType!
  editAccount(
    action: String
    avatar: String
    email: String
    name: String
    other_user_id: String
    password: String
    return_other: Boolean
    settings: SettingsInput
  ): AccountType!
  login(email: String!, password: String!): AccountType!
  logoutAllDevices: Boolean
  logoutSingleDevice: Boolean
  postLocation(latitude: Float!, longitude: Float!): AccountType!
  register(
    avatar: String!
    email: String!
    name: String!
    password: String!
  ): AccountType!
  requestPasswordReset(email: String!): Boolean
  submitPasswordReset(
    email: String!
    password: String!
    reset_token: String!
  ): AccountType!
  createBlogPost(
    body: String!
    image: String!
    subtitle: String
    title: String!
  ): BlogPostType
  createComment(body: String!): BlogPostType
  deleteBlogPost(_id: ID!): Boolean
  deleteComment(blogPostID: String!, commentID: String!): Boolean
  editBlogPost(
    body: String!
    image: String!
    subtitle: String
    title: String!
  ): BlogPostType
  addCardToCube(
    componentID: String!
    name: String!
    scryfall_id: String!
  ): CubeType
  cloneCube: CubeType!
  createCube(cobraID: String, description: String, name: String!): CubeType!
  createModule(name: String!): CubeType
  createRotation(name: String!): CubeType
  deleteCard(cardID: ID!, originID: ID!, destinationID: ID): Boolean
  deleteCube: Boolean
  deleteModule(_id: ID!): Boolean
  deleteRotation(_id: ID!): Boolean
  editCard(
    cardID: ID!
    componentID: ID!
    cmc: Int!
    color_identity: [String!]
    notes: String!
    scryfall_id: String!
    type_line: String!
  ): CubeType
  editCube(
    description: String
    image: String
    name: String
    published: Boolean
  ): CubeType
  editModule(moduleID: ID!, name: String): CubeType
  editRotation(rotationID: ID!, name: String, size: Int): CubeType
  addCardsToDeck(
    component: DeckComponentEnum!
    name: String
    numberOfCopies: Int!
    scryfall_id: String
  ): DeckType
  changeCardPrinting(input: String!): DeckType
  cloneDeck: DeckType!
  createDeck(
    description: String
    existingListID: String
    format: FormatEnum
    name: String
  ): DeckType
  deleteDeck: Boolean
  editDeck(
    description: String
    image: String
    format: FormatEnum
    name: String
    published: Boolean
  ): DeckType
  removeCardsFromDeck(cardIDs: [ID]!, component: DeckComponentEnum!): DeckType
  toggleMainboardSideboardDeck(cardID: ID!): DeckType
  addBasics(
    component: DeckComponentEnum!
    name: String!
    numberOfCopies: Int!
    scryfall_id: String!
  ): EventType
  createEvent(
    cards_per_pack: Int!
    event_type: EventEnum!
    modules: [String]
    name: String!
    other_players: [String]
    packs_per_player: Int!
  ): EventType!
  toggleMainboardSideboardEvent(cardID: ID!): EventType
  removeBasics(cardIDs: [ID]!, component: DeckComponentEnum!): EventType
  selectCard(_id: ID!): EventType
  adjustCounters(
    cardID: ID!
    counterAmount: Int!
    counterType: String!
    zone: PlayZoneEnum!
  ): MatchType
  adjustEnergyCounters(energy: Int!): MatchType
  adjustLifeTotal(life: Int!): MatchType
  adjustPoisonCounters(poison: Int!): MatchType
  changeFaceDownImage(
    cardID: ID!
    faceDownImage: FaceDownImageEnum!
    zone: PlayZoneEnum!
  ): MatchType
  concedeGame: MatchType
  createCopies(
    cardID: ID!
    controllerID: String!
    numberOfCopies: Int!
    zone: PlayZoneEnum!
  ): MatchType
  createMatch(deckIDs: [ID], eventID: ID, playerIDs: [ID]!): MatchType!
  createTokens(
    name: String!
    scryfall_id: String!
    numberOfTokens: Int!
  ): MatchType
  destroyCopyToken(cardID: ID!, zone: PlayZoneEnum!): MatchType
  dragCard(cardID: ID!, xCoordinate: Float!, yCoordinate: Float!): MatchType
  drawCard: MatchType
  flipCard(cardID: ID!, zone: PlayZoneEnum!): MatchType
  flipCoin: MatchType
  gainControlOfCard(
    cardID: ID!
    controllerID: String!
    zone: PlayZoneEnum!
  ): MatchType
  mulligan: MatchType
  ready: MatchType
  revealCard(cardID: ID!, zone: PlayZoneEnum!): MatchType
  rollDice(sides: Int!): MatchType
  shuffleLibrary: MatchType
  tapUntapCards(cardIDs: [ID!]!): MatchType
  toggleMainboardSideboardMatch(cardID: ID!): MatchType
  transferCard(
    cardID: ID!
    destinationZone: PlayZoneEnum!
    index: Int
    originZone: PlayZoneEnum!
    reveal: Boolean!
    shuffle: Boolean!
  ): MatchType
  turnCard(cardID: ID!, zone: PlayZoneEnum!): MatchType
  viewCard(cardID: ID!, controllerID: String!, zone: PlayZoneEnum!): MatchType
  viewZone(controllerID: ID!, zone: PlayZoneEnum!): MatchType
}
